{"version":3,"mappings":"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","names":["t","MESSAGE_TYPE_PROPERTY","MessageTypeEnum","data","type","postMessage","obj","PROGRESS_STATUS_EVENT","constructor","callback","this","undefined","maybeCallWith","isEqual","previousData","processorGenerator","processorCount","isDebugging","range","forEach","idleProcessors","push","hasWork","pendingWorkQueue","length","hasIdleProcessors","queueStartWork","isStartWorkQueued","setTimeout","startWork","debug","Math","min","queuedWork","dequeueFirst","processor","pop","onWorkStarted","id","work","functionName","execute","onStatus","then","onData","catch","error","onError","finally","stop","arr","console","runningWorkQueue","beforeProcessorRecycle","dequeue","workInProgress","dequeueWorkInProgress","enqueue","status","Subject","dedupeStatus","DeDuplicateCaller","message","next","Date","getTime","floor","random","Promise","firstItem","slice","itemIndex","findIndex","item","splice","index","stopAll","PooledExecutor","workerGenerator","getWorker","worker","result","res","rej","onmessage","isGenericMessage","RESULT","isResultMessage","STATUS","isStatusMessage","onerror","onmessageerror","args","RUN","newRunMessage","u","_a","terminate","dispatchStatus","detail","self","addEventListener","function","removeEventListener","exposeObject","eventData","postGenericMessage","postStatusMessage","event","Array","isArray","isRunMessage","exposeObjectStructure","Object","fromEntries","entries","map","key","value","Error","JSON","stringify","postResultMessage","expose","commonWorkerFunctions","y","loaded","exports","n","s","g","d","l","c","h","a","enumerable","createScriptURL","importScripts","S"],"sources":["webpack/runtime/chunk loaded","./src/app/solver/worker-utils.ts","./src/app/solver/solver-common.worker.ts","webpack/bootstrap","webpack/runtime/compat get default export","webpack/runtime/define property getters","webpack/runtime/ensure chunk","webpack/runtime/get javascript chunk filename","webpack/runtime/get mini-css chunk filename","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/node module decorator","webpack/runtime/trusted types policy","webpack/runtime/trusted types script url","webpack/runtime/publicPath","webpack/runtime/importScripts chunk loading","webpack/runtime/startup chunk dependencies","webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","/*\nA suite of utilities to make working with web workers easier.\n */\n\nimport { isEqual, range } from 'lodash';\nimport { Subject } from 'rxjs';\n\ntype JustMethodKeys<T> = {\n  [P in keyof T]: T[P] extends Function ? P : never;\n}[keyof T];\ntype ArgumentTypes<T> = T extends (...args: infer U) => any ? U : never;\n\ninterface ObjectFunctionCallMessage {\n  data: RunMessage;\n}\n\nconst MESSAGE_TYPE_PROPERTY = '__type__';\nenum MessageTypeEnum {\n  STATUS = 'status',\n  RESULT = 'result',\n  RUN = 'run',\n}\n\nexport interface StatusMessage {\n  [MESSAGE_TYPE_PROPERTY]: MessageTypeEnum.STATUS;\n  data: any;\n}\n\nconst PROP_FUNCTION_NAME = 'functionName';\nconst PROP_FUNCTION_ARGS = 'args';\ninterface RunMessage {\n  [MESSAGE_TYPE_PROPERTY]: MessageTypeEnum.RUN;\n  [PROP_FUNCTION_NAME]: string;\n  [PROP_FUNCTION_ARGS]: any[];\n}\n\ninterface GenericObject {\n  [key: string | symbol]: (...any: any[]) => any | never;\n}\n\nexport function postGenericMessage<T>(data: T, type: MessageTypeEnum): void {\n  postMessage({\n    data,\n    [MESSAGE_TYPE_PROPERTY]: type,\n  });\n}\n\nexport function postStatusMessage<T>(data: T): void {\n  postGenericMessage(data, MessageTypeEnum.STATUS);\n}\n\nexport function postResultMessage<T>(data: T): void {\n  postGenericMessage(data, MessageTypeEnum.RESULT);\n}\n\nexport function postErrorMessage<T>(data: T): void {\n  postGenericMessage(data, MessageTypeEnum.RESULT);\n}\n\nfunction newRunMessage(functionName: string, args: any[]): RunMessage {\n  return {\n    [MESSAGE_TYPE_PROPERTY]: MessageTypeEnum.RUN,\n    functionName,\n    args,\n  };\n}\n\nfunction isGenericMessage(obj: any, type: MessageTypeEnum): boolean {\n  return MESSAGE_TYPE_PROPERTY in obj && obj[MESSAGE_TYPE_PROPERTY] === type;\n}\n\nexport function isStatusMessage(obj: any): boolean {\n  return isGenericMessage(obj, MessageTypeEnum.STATUS);\n}\n\nexport function isResultMessage(obj: any): boolean {\n  return isGenericMessage(obj, MessageTypeEnum.RESULT);\n}\n\nfunction isRunMessage(obj: any, exposeObject: GenericObject): boolean {\n  return (\n    isGenericMessage(obj, MessageTypeEnum.RUN) &&\n    PROP_FUNCTION_NAME in obj &&\n    PROP_FUNCTION_ARGS in obj &&\n    typeof obj.functionName === 'string' &&\n    Array.isArray(obj.args) &&\n    obj.functionName in exposeObject &&\n    typeof exposeObject[obj.functionName] === 'function'\n  );\n}\n\nconst PROGRESS_ROOT_EVENT = 'root';\nexport const PROGRESS_STATUS_EVENT = 'progress_status';\nexport interface ProgressStatusEventData {\n  readonly detail: {\n    readonly id: string;\n    readonly data: ProgressStatus;\n  };\n}\n\nexport function emitProgressStatus(id: string, progressStatus: ProgressStatus) {\n  self.dispatchEvent(\n    new CustomEvent<ProgressStatusEventData>(PROGRESS_STATUS_EVENT, {\n      detail: {\n        id,\n        data: progressStatus,\n      },\n    } as any)\n  );\n}\n\nexport function emitProgressStatusRoot(progressStatus: ProgressStatus) {\n  return emitProgressStatus(PROGRESS_ROOT_EVENT, progressStatus);\n}\n\nclass DeDuplicateCaller<T> {\n  private previousData: T | undefined = undefined;\n\n  constructor(private readonly callback: (data: T) => void) {}\n\n  public maybeCallWith(data: T) {\n    if (!isEqual(data, this.previousData)) {\n      this.previousData = data;\n      this.callback(data);\n    }\n  }\n}\n\nexport function expose(exposeObject: GenericObject): void {\n  const dedupeStatus = new DeDuplicateCaller(\n    (eventData: ProgressStatusEventData) => postStatusMessage(eventData.detail)\n  );\n  self.addEventListener(PROGRESS_STATUS_EVENT, (event: Event) => {\n    const eventData = event as any as ProgressStatusEventData;\n    if (eventData.detail.id === PROGRESS_ROOT_EVENT) {\n      dedupeStatus.maybeCallWith(eventData);\n    }\n  });\n\n  self.addEventListener(\n    'message',\n    async (message: ObjectFunctionCallMessage) => {\n      const { data } = message;\n      if (isRunMessage(data, exposeObject)) {\n        const result = await exposeObject[data.functionName](...data.args);\n        postResultMessage(result);\n      } else {\n        const exposeObjectStructure = Object.fromEntries(\n          Object.entries(exposeObject).map(([key, value]) => [\n            key,\n            typeof value,\n          ])\n        );\n        throw new Error(\n          `Invalid ${MessageTypeEnum.RUN} message ${JSON.stringify(\n            data,\n            null,\n            2\n          )}. Expose object structure: ${JSON.stringify(\n            exposeObjectStructure,\n            null,\n            2\n          )}`\n        );\n      }\n    }\n  );\n}\n\nexport interface ProgressStatus {\n  current: number;\n  buffer: number;\n  total: number;\n}\n\n/**\n * Pooled executor for managing work across multiple processors.\n */\nexport class PooledExecutor {\n  private idleProcessors: PooledExecutor.Processor[] = [];\n\n  private pendingWorkQueue: PooledExecutor.QueuedWork<any, any>[] = [];\n\n  private runningWorkQueue: PooledExecutor.QueuedWorkInProgress<any, any>[] =\n    [];\n\n  private isStartWorkQueued = false;\n\n  public constructor(\n    private readonly processorGenerator: () => PooledExecutor.Processor,\n    processorCount: number,\n    private readonly isDebugging = false\n  ) {\n    range(processorCount).forEach(() =>\n      this.idleProcessors.push(processorGenerator())\n    );\n  }\n\n  private hasWork() {\n    return this.pendingWorkQueue.length > 0;\n  }\n\n  private hasIdleProcessors() {\n    return this.idleProcessors.length > 0;\n  }\n\n  private queueStartWork() {\n    if (this.isStartWorkQueued) {\n      return;\n    }\n\n    setTimeout(() => this.startWork(), 0);\n    this.isStartWorkQueued = true;\n  }\n\n  private startWork() {\n    this.debug(\n      'startWork',\n      this.pendingWorkQueue.length,\n      this.idleProcessors.length\n    );\n\n    this.isStartWorkQueued = false;\n    range(\n      Math.min(this.pendingWorkQueue.length, this.idleProcessors.length)\n    ).forEach(() => {\n      if (!this.hasWork()) {\n        return;\n      }\n\n      if (!this.hasIdleProcessors()) {\n        return;\n      }\n\n      const queuedWork = this.dequeueFirst()!;\n      const processor = this.idleProcessors.pop()!;\n\n      this.onWorkStarted(queuedWork, processor);\n\n      // Execute the work.\n      this.debug('Starting work', queuedWork.id, queuedWork.work.functionName);\n      processor\n        .execute(queuedWork.work, queuedWork.onStatus)\n        .then((data) => {\n          this.debug(\n            'Work result',\n            queuedWork.id,\n            queuedWork.work.functionName\n          );\n          return queuedWork.onData(data);\n        })\n        .catch((error) => {\n          this.debug('Work error:', error, queuedWork.work.functionName);\n          queuedWork.onError(error);\n        })\n        // Restore the processor.\n        .finally(() => {\n          this.debug(\n            'Work finished',\n            queuedWork.id,\n            queuedWork.work.functionName\n          );\n          this.stop(queuedWork.id);\n          // Try to do more work.\n          this.queueStartWork();\n        });\n    });\n  }\n\n  private debug(...arr: any[]) {\n    if (this.isDebugging) {\n      console.debug(...arr);\n    }\n  }\n\n  private onWorkStarted(\n    queuedWork: PooledExecutor.QueuedWork<any, any>,\n    processor: PooledExecutor.Processor\n  ) {\n    this.debug('onWorkStarted', queuedWork.id, queuedWork.work.functionName);\n    this.runningWorkQueue.push({\n      queuedWork,\n      processor,\n    });\n  }\n\n  /**\n   * Stop work. If it is pending, then it will be removed from the queue. If it is processing, it will be removed and\n   * the current process will be stopped.\n   * @param id\n   * @param beforeProcessorRecycle Execute this before recycling the processing back into the idle processor queue.\n   * @private\n   */\n  public stop(\n    id: string,\n    beforeProcessorRecycle: PooledExecutor.QueuedWorkInProgressCallback = () =>\n      undefined\n  ) {\n    this.debug('stop', id);\n    this.dequeue(id);\n\n    const workInProgress = this.dequeueWorkInProgress(id);\n    if (workInProgress) {\n      this.debug('Stopping processor');\n      workInProgress.processor.stop();\n      beforeProcessorRecycle(workInProgress);\n      this.debug('Recycling processor');\n      this.idleProcessors.push(workInProgress.processor);\n    }\n  }\n\n  public enqueue<Return, Status>(\n    work: PooledExecutor.Work<Return>\n  ): PooledExecutor.WorkHandler<Return, Status> {\n    const status = new Subject<Status>();\n    const dedupeStatus = new DeDuplicateCaller((message: any) =>\n      status.next(message)\n    );\n    const id = `${\n      this.pendingWorkQueue.length\n    }_${new Date().getTime()}_${Math.floor(Math.random() * 10000)}`;\n    const stop = () => {\n      this.debug('workHandler stop', id);\n      this.stop(id);\n    };\n\n    this.debug('enqueue', id, work.functionName);\n\n    const data = new Promise<Return>((onData, onError) => {\n      this.pendingWorkQueue.push({\n        id,\n        work,\n        stop,\n        onData,\n        onError,\n        onStatus: (message) => dedupeStatus.maybeCallWith(message),\n      });\n      this.debug(\n        'pendingWork push',\n        id,\n        work.functionName,\n        this.pendingWorkQueue.length\n      );\n    });\n\n    this.queueStartWork();\n\n    return {\n      id,\n      data,\n      status,\n      stop,\n    };\n  }\n\n  public dequeueFirst() {\n    this.debug('dequeueFirst');\n    const firstItem = this.pendingWorkQueue.slice(0, 1).pop();\n    if (firstItem) {\n      return this.dequeue(firstItem.id);\n    }\n\n    return undefined;\n  }\n\n  public dequeue(id: string) {\n    this.debug('dequeue', id);\n    const itemIndex = this.pendingWorkQueue.findIndex((item) => item.id === id);\n    if (itemIndex > -1) {\n      return this.pendingWorkQueue.splice(itemIndex, 1).pop();\n    }\n    return undefined;\n  }\n\n  private dequeueWorkInProgress(id: string) {\n    this.debug('dequeueWorkInProgress', id);\n    const index = this.runningWorkQueue.findIndex(\n      (item) => item.queuedWork.id === id\n    );\n    if (index > -1) {\n      return this.runningWorkQueue.splice(index, 1).pop();\n    }\n    return undefined;\n  }\n\n  public stopAll() {\n    this.pendingWorkQueue.forEach((item) => item.stop());\n    this.runningWorkQueue.forEach((item) => item.queuedWork.stop());\n  }\n}\n\nexport namespace PooledExecutor {\n  export interface Work<Return> {\n    functionName: string;\n    function: {\n      (...args: any[]): Return;\n      name: string;\n    };\n    args: any[];\n  }\n\n  export interface QueuedWork<Return, Status> {\n    id: string;\n    work: Work<Return>;\n    stop: () => void;\n    onData: (data: Return) => void;\n    onError: (error: any) => void;\n    onStatus: (status: Status) => void;\n  }\n\n  export interface QueuedWorkInProgress<Return, Status> {\n    queuedWork: PooledExecutor.QueuedWork<Return, Status>;\n    processor: PooledExecutor.Processor;\n  }\n\n  export type QueuedWorkInProgressCallback = (\n    workInProgress: QueuedWorkInProgress<any, any>\n  ) => void;\n\n  export interface WorkHandler<Return, Status> {\n    id: string;\n    data: Promise<Return>;\n    status: Subject<Status>;\n    stop: () => void;\n  }\n\n  export interface Processor {\n    execute<Return, Status>(\n      work: Work<Return>,\n      onStatus: (status: Status) => void\n    ): Promise<Return>;\n    stop(): void;\n  }\n\n  export class WebWorkerProcessor implements Processor {\n    private worker?: Worker;\n\n    public constructor(private readonly workerGenerator: () => Worker) {}\n\n    protected getWorker(): Worker {\n      if (!this.worker) {\n        this.worker = this.workerGenerator();\n      }\n\n      return this.worker;\n    }\n\n    public execute<Return, Status>(\n      work: Work<Return>,\n      onStatus: (status: Status) => void\n    ): Promise<Return> {\n      const worker = this.getWorker();\n\n      const result = new Promise<Return>((res, rej) => {\n        worker.onmessage = ({ data }) => {\n          if (isResultMessage(data)) {\n            res(data.data);\n          } else if (isStatusMessage(data)) {\n            onStatus(data.data.data);\n          }\n        };\n        worker.onerror = rej;\n        worker.onmessageerror = rej;\n      }).finally(() => {\n        worker.onmessage = () => undefined;\n        worker.onerror = () => undefined;\n        worker.onmessageerror = () => undefined;\n      });\n\n      worker.postMessage(newRunMessage(work.functionName, work.args));\n\n      return result;\n    }\n\n    public stop(): void {\n      this.worker?.terminate();\n      this.worker = undefined;\n    }\n  }\n\n  export class LocalProcessor implements Processor {\n    public async execute<Return, Status>(\n      work: Work<Return>,\n      onStatus: (status: Status) => void\n    ): Promise<Return> {\n      const dispatchStatus = (status: any) => {\n        onStatus(status.detail.data);\n      };\n      self.addEventListener(PROGRESS_STATUS_EVENT, dispatchStatus);\n\n      const result = await work.function(...work.args);\n\n      self.removeEventListener(PROGRESS_STATUS_EVENT, dispatchStatus);\n\n      return result;\n    }\n\n    public stop(): void {\n      // Empty because this cannot be supported on single threads.\n      // console.warn(\n      //   `${LocalProcessor.name}.${this.stop.name}() is not supported.`\n      // );\n    }\n  }\n}\n\ntype GenericFunction = (...args: any[]) => any;\ntype ObjectOfGenericFunctions = { [key: string | symbol]: GenericFunction };\n\nexport type PooledWorkerClientFunctionsType<\n  T extends ObjectOfGenericFunctions\n> = {\n  // We take just the method key and Promisify them,\n  // We have to use T[P] & Function because the compiler will not realize T[P] will always be a function\n  [P in JustMethodKeys<T>]: (\n    ...a: ArgumentTypes<T[P]>\n  ) => PooledExecutor.WorkHandler<ReturnType<T[P]>, ProgressStatus>;\n};\n\n/**\n * Takes an object of functions and wraps the functions in a pooled executor.\n * @param executor\n * @param sourceObject\n */\nexport function pooledFunctions<T extends ObjectOfGenericFunctions>(\n  executor: PooledExecutor,\n  sourceObject: T\n): PooledWorkerClientFunctionsType<T> {\n  return new Proxy(sourceObject, {\n    get(target: any, prop: string | symbol): any {\n      return (...args: any[]) => {\n        return executor.enqueue({\n          args,\n          functionName: prop.toString(),\n          function: (sourceObject as any)[prop],\n        });\n      };\n    },\n  });\n}\n","import { commonWorkerFunctions } from './solver-common';\nimport { expose } from './worker-utils';\n\nexpose(commonWorkerFunctions);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [47], () => (__webpack_require__(232)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".\" + \"a77b4e54f0d57a94\" + \".js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","var policy;\n__webpack_require__.tt = () => {\n\t// Create Trusted Type policy if Trusted Types are available and the policy doesn't exist yet.\n\tif (policy === undefined) {\n\t\tpolicy = {\n\t\t\tcreateScriptURL: (url) => (url)\n\t\t};\n\t\tif (typeof trustedTypes !== \"undefined\" && trustedTypes.createPolicy) {\n\t\t\tpolicy = trustedTypes.createPolicy(\"angular#bundler\", policy);\n\t\t}\n\t}\n\treturn policy;\n};","__webpack_require__.tu = (url) => (__webpack_require__.tt().createScriptURL(url));","__webpack_require__.p = \"\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t232: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.tu(__webpack_require__.p + __webpack_require__.u(chunkId)));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkapp\"] = self[\"webpackChunkapp\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(47).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"sourceRoot":"webpack:///","file":"232.0c000d62613e8b0f.js"}